define("promised-db",["require","exports"],function(t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var e=function(){function t(t,n,e){this.db_=this._request(indexedDB.open(t,n),function(t){t.onupgradeneeded=function(r){e(t.result,r.oldVersion,r.newVersion||n)}}).catch(function(n){console.warn("PromisedDB: failed to open / upgrade database '"+t+"'",n)}),this.tctx_={request:this._request.bind(this),cursor:this._cursor.bind(this),keyCursor:this._keyCursor.bind(this),getAll:this._getAll.bind(this),getAllKeys:this._getAllKeys.bind(this)}}return t.prototype.close=function(){this.db_.then(function(t){t.close()})},t.prototype.transaction=function(t,n,e){var r=this;return this.db_.then(function(o){return new Promise(function(i,u){var c=o.transaction(t,n);c.onerror=function(){l(),u(c.error||"transaction failed")},c.onabort=function(){l(),u("aborted")};var s=null,l=function(){null!==s&&(clearTimeout(s),s=null)},a=Object.create(r.tctx_,{timeout:{value:function(t){s=setTimeout(function(){s=null,c.abort()},t)}}}),f=e(c,a);c.oncomplete=function(){l(),i(f)}})})},t.prototype._request=function(t,n){var e=new Promise(function(e,r){t.onerror=function(){r(t.error||"request failed")},t.onsuccess=function(){e(t.result)},n&&n(t)});return this.db_?this.db_.then(function(){return e}):e},t.prototype._cursorImpl=function(t){var n={next:function(t){return this.callbackFn_=t,this},complete:function(t){return this.completeFn_=t,this},catch:function(t){return this.errorFn_=t,this}};return t.onerror=function(){n.errorFn_&&n.errorFn_(t.error)},t.onsuccess=function(){var e=t.result;e?n.callbackFn_&&n.callbackFn_(e):n.completeFn_&&n.completeFn_()},n},t.prototype._cursor=function(t,n,e){var r=t.openCursor(n,e);return this._cursorImpl(r)},t.prototype._keyCursor=function(t,n,e){var r=t.openKeyCursor(n,e);return this._cursorImpl(r)},t.prototype._getAll=function(t,n,e,r){var o=this;return new Promise(function(i,u){var c=[];o._cursor(t,n,e).next(function(t){c.push(t.value),r&&c.length===r?i(c):t.continue()}).complete(function(){i(c)}).catch(function(t){u(t)})})},t.prototype._getAllKeys=function(t,n,e,r){var o=this;return new Promise(function(i,u){var c=[];o._keyCursor(t,n,e).next(function(t){c.push(t.primaryKey),r&&c.length===r?i(c):t.continue()}).complete(function(){i(c)}).catch(function(t){u(t)})})},t}();n.default=e});
//# sourceMappingURL=dist/promised-db.min.js.map